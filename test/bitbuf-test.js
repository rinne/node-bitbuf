'use strict';

const BitBuf = require('../bitbuf.js');
const assert = require('assert');

(function() {
	var x = BitBuf.from('1011001110001111000011111000001111110000001111111');
	assert.equal(x.toString(), '1011001110001111000011111000001111110000001111111');
	x = x.not();
	assert.equal(x.toString(), '0100110001110000111100000111110000001111110000000');
	x = x.xor(BitBuf.from('1111111111111111111100000000000000000000000000000'));
	assert.equal(x.toString(), '1011001110001111000000000111110000001111110000000');
	x = x.slice(13, 24).not();
	assert.equal(x.toString(),'00011111111');
	x = BitBuf.from('1011001110001111000011111000001111110000001111111');
	assert.equal(x.toString(), '1011001110001111000011111000001111110000001111111');
	x = x.rot(123).rot(-123 - (10 * x.length));
	assert.equal(x.toString(), '1011001110001111000011111000001111110000001111111');
	x = x.shift(30);
	assert.equal(x.toString(), '0000000000000000000000000000001011001110001111000');
	x = x.shift(-20);
	assert.equal(x.toString(), '0000000000101100111000111100000000000000000000000');
	x = x.and(BitBuf.from('0101010101010101010101010101010101010101010101010'));
	assert.equal(x.toString(), '0000000000000100010000010100000000000000000000000');
	x = x.or(BitBuf.from('1010101010101010101010101010101010101010101010101'));
	assert.equal(x.toString(), '1010101010101110111010111110101010101010101010101');
	console.log('ok');
	process.exit(0);
})();
